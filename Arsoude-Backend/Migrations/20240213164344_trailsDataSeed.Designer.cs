// <auto-generated />
using System;
using Arsoude_Backend.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Arsoude_Backend.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240213164344_trailsDataSeed")]
    partial class trailsDataSeed
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.26");

            modelBuilder.Entity("Arsoude_Backend.Models.Coordinates", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("Latitude")
                        .HasColumnType("REAL");

                    b.Property<double>("Longitude")
                        .HasColumnType("REAL");

                    b.Property<int?>("TrailId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TrailId");

                    b.ToTable("Coordinates");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Latitude = 45.559601999999998,
                            Longitude = -73.580235999999999
                        },
                        new
                        {
                            Id = 2,
                            Latitude = 45.671821999999999,
                            Longitude = -73.526653999999994
                        });
                });

            modelBuilder.Entity("Arsoude_Backend.Models.Trail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("EndingCoordinatesId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("IsApproved")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("OwnerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StartingCoordinatesId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("isPublic")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EndingCoordinatesId");

                    b.HasIndex("StartingCoordinatesId");

                    b.ToTable("Trails");

                    b.HasData(
                        new
                        {
                            Id = 2,
                            Description = "Une randonnée pittoresque à travers une forêt luxuriante où les oiseaux chantent et les rivières murmurent.",
                            EndingCoordinatesId = 2,
                            ImageUrl = "https://www.parksconservancy.org/sites/default/files/styles/basic/public/programs/A_PRSF_111020_MCu_020-2104x1440.jpg?itok=Cp14Z3ba",
                            Location = "Parc National de la Forêt Verte",
                            Name = "Sentier de la Forêt Enchantée",
                            OwnerId = 1,
                            StartingCoordinatesId = 1,
                            Type = 0,
                            isPublic = false
                        },
                        new
                        {
                            Id = 3,
                            Description = "Une aventure difficile menant au sommet d'une montagne majestueuse offrant une vue imprenable sur la vallée ci-dessous.",
                            EndingCoordinatesId = 4,
                            ImageUrl = "https://cdn.kimkim.com/files/a/images/47739a6ddfef20df8e214fb3bd457adf1f27feab/original-fd1e0fff538a1dd6ebb2ab679ffbab4d.jpg",
                            Location = "Parc National des Montagnes Escarpées",
                            Name = "Escapade au Sommet",
                            OwnerId = 1,
                            StartingCoordinatesId = 3,
                            Type = 1,
                            isPublic = false
                        },
                        new
                        {
                            Id = 4,
                            Description = "Une promenade facile le long de ruisseaux pittoresques et de cascades rafraîchissantes, idéal pour toute la famille.",
                            EndingCoordinatesId = 6,
                            ImageUrl = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQAO_hEyiI2Tkfl5TI78QWQpncjBZ_7VWxtU4rceThJXeSRAKCutUx62Hfw5sdbX_QBEa4&usqp=CAU",
                            Location = "Parc Naturel des Chutes d'Eau",
                            Name = "Chemin des Cascades",
                            OwnerId = 1,
                            StartingCoordinatesId = 5,
                            Type = 1,
                            isPublic = false
                        },
                        new
                        {
                            Id = 5,
                            Description = "Un sentier sinueux à travers une vallée verdoyante parsemée de fleurs sauvages et offrant des vues spectaculaires sur les montagnes environnantes.",
                            EndingCoordinatesId = 8,
                            ImageUrl = "https://i.pinimg.com/originals/7f/e4/e2/7fe4e24eb9024d61139ac44a607e478a.jpg",
                            Location = "Parc National de la Vallée Florissante",
                            Name = "Randonnée de la Vallée Verdoyante",
                            OwnerId = 1,
                            StartingCoordinatesId = 7,
                            Type = 0,
                            isPublic = false
                        },
                        new
                        {
                            Id = 6,
                            Description = "Une agréable balade autour d'un lac paisible, idéale pour observer la faune locale et profiter d'un moment de calme.",
                            EndingCoordinatesId = 10,
                            ImageUrl = "https://californiathroughmylens.com/wp-content/uploads/2019/05/crystal-cove-el-moro-12-640x427.jpg",
                            Location = "Réserve Naturelle du Lac Serein",
                            Name = "Boucle du Lac Tranquille",
                            OwnerId = 1,
                            StartingCoordinatesId = 9,
                            Type = 1,
                            isPublic = false
                        },
                        new
                        {
                            Id = 7,
                            Description = "Une randonnée modérée à travers les collines ondulantes offrant des panoramas magnifiques sur la campagne environnante.",
                            EndingCoordinatesId = 12,
                            ImageUrl = "https://blog.ab.bluecross.ca/wp-content/uploads/2020/08/fav-hikes-part-three.jpg",
                            Location = "Parc Naturel des Collines Verdoyantes",
                            Name = "Sentier des Collines",
                            OwnerId = 1,
                            StartingCoordinatesId = 11,
                            Type = 1,
                            isPublic = false
                        },
                        new
                        {
                            Id = 8,
                            Description = "Une promenade relaxante le long d'une rivière tranquille, où vous pourrez vous détendre au son de l'eau qui coule et observer la vie sauvage.",
                            EndingCoordinatesId = 14,
                            ImageUrl = "https://www.travelandleisure.com/thmb/9TgvQ-g-uFDD4IwbBzlZ8eeEZs8=/1500x0/filters:no_upscale():max_bytes(150000):strip_icc()/george-s-mickelson-trail-south-dakota_RAILTRAIL0123-f3e27d5d1e2f44efb8bf368185d74130.jpg",
                            Location = "Parc Naturel de la Rivière Sereine",
                            Name = "Parcours de la Rivière Paisible",
                            OwnerId = 1,
                            StartingCoordinatesId = 13,
                            Type = 0,
                            isPublic = false
                        },
                        new
                        {
                            Id = 9,
                            Description = "Une courte randonnée menant à une cascade scintillante, où vous pourrez vous rafraîchir et prendre de superbes photos.",
                            EndingCoordinatesId = 16,
                            ImageUrl = "https://www.nps.gov/hosp/planyourvisit/images/_DSC7261.jpg?maxwidth=650&autorotate=false",
                            Location = "Parc Naturel de la Cascade d'Argent",
                            Name = "Chemin de la Cascade d'Argent",
                            OwnerId = 1,
                            StartingCoordinatesId = 15,
                            Type = 0,
                            isPublic = false
                        },
                        new
                        {
                            Id = 10,
                            Description = "Une randonnée épique menant au sommet des montagnes les plus élevées, offrant des vues à couper le souffle sur les vallées et les sommets environnants.",
                            EndingCoordinatesId = 18,
                            ImageUrl = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTUGLsH09jYtknRspMu0BDdOsADZrSLhzBUtA&usqp=CAU",
                            Location = "Parc National des Hautes Montagnes",
                            Name = "Randonnée des Cimes",
                            OwnerId = 1,
                            StartingCoordinatesId = 17,
                            Type = 0,
                            isPublic = false
                        },
                        new
                        {
                            Id = 11,
                            Description = "Une agréable promenade à travers une forêt de chênes majestueux, où vous pourrez admirer la beauté de la nature et observer la faune locale.",
                            EndingCoordinatesId = 20,
                            ImageUrl = "https://www.surrey.ca/sites/default/files/styles/metatag_facebook/public/2020-08/InvergarryNatureTrail.JPG?h=d262251e&itok=oXPbDLYW",
                            Location = "Réserve Naturelle des Chênes Rouges",
                            Name = "Sentier des Chênes Rouges",
                            OwnerId = 1,
                            StartingCoordinatesId = 19,
                            Type = 0,
                            isPublic = false
                        },
                        new
                        {
                            Id = 12,
                            Description = "Une balade tranquille autour d'un lac miroir, où le reflet des montagnes crée une atmosphère magique.",
                            EndingCoordinatesId = 22,
                            ImageUrl = "https://i.natgeofe.com/n/71741e7e-db92-41fc-9c54-f781c3df87df/2C57A8C_16x9.jpg",
                            Location = "Parc Naturel du Lac Miroir",
                            Name = "Parcours du Lac Miroir",
                            OwnerId = 1,
                            StartingCoordinatesId = 21,
                            Type = 1,
                            isPublic = false
                        },
                        new
                        {
                            Id = 13,
                            Description = "Une randonnée agréable le long d'une rivière sinueuse, où vous pourrez apercevoir des loutres jouant dans l'eau cristalline.",
                            EndingCoordinatesId = 24,
                            ImageUrl = "https://www.mississauga.ca/wp-content/uploads/2022/10/14143203/20221010_115918-scaled.jpg",
                            Location = "Réserve Naturelle des Loutres",
                            Name = "Boucle des Loutres",
                            OwnerId = 1,
                            StartingCoordinatesId = 23,
                            Type = 0,
                            isPublic = false
                        },
                        new
                        {
                            Id = 14,
                            Description = "Une randonnée spectaculaire le long de falaises escarpées offrant des vues à couper le souffle sur l'océan et les îles lointaines.",
                            EndingCoordinatesId = 26,
                            ImageUrl = "https://i.cbc.ca/1.4170049.1530218327!/fileImage/httpImage/hiking-trails.jpg",
                            Location = "Réserve Naturelle des Falaises",
                            Name = "Parcours des Falaises",
                            OwnerId = 1,
                            StartingCoordinatesId = 25,
                            Type = 1,
                            isPublic = false
                        },
                        new
                        {
                            Id = 15,
                            Description = "Une randonnée exigeante menant au sommet d'un pic enneigé, offrant des vues panoramiques sur les montagnes enneigées à perte de vue.",
                            EndingCoordinatesId = 28,
                            ImageUrl = "https://www.lethbridge.ca/media/4bsdermr/pavan-trail.jpg",
                            Location = "Parc National des Pics Enneigés",
                            Name = "Randonnée du Pic Enneigé",
                            OwnerId = 1,
                            StartingCoordinatesId = 27,
                            Type = 1,
                            isPublic = false
                        },
                        new
                        {
                            Id = 16,
                            Description = "Une agréable balade le long d'une rivière sinueuse, où vous pourrez observer une grande variété d'oiseaux et de poissons.",
                            EndingCoordinatesId = 30,
                            ImageUrl = "https://www.travelandleisure.com/thmb/9TgvQ-g-uFDD4IwbBzlZ8eeEZs8=/1500x0/filters:no_upscale():max_bytes(150000):strip_icc()/george-s-mickelson-trail-south-dakota_RAILTRAIL0123-f3e27d5d1e2f44efb8bf368185d74130.jpg",
                            Location = "Parc Naturel de la Rivière Serpentine",
                            Name = "Parcours de la Rivière Serpentine",
                            OwnerId = 1,
                            StartingCoordinatesId = 29,
                            Type = 1,
                            isPublic = false
                        },
                        new
                        {
                            Id = 17,
                            Description = "Une randonnée matinale menant à un point de vue idéal pour observer le lever du soleil sur les montagnes environnantes.",
                            EndingCoordinatesId = 32,
                            ImageUrl = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTUGLsH09jYtknRspMu0BDdOsADZrSLhzBUtA&usqp=CAU",
                            Location = "Parc National du Lever du Soleil",
                            Name = "Randonnée du Lever du Soleil",
                            OwnerId = 1,
                            StartingCoordinatesId = 31,
                            Type = 0,
                            isPublic = false
                        },
                        new
                        {
                            Id = 18,
                            Description = "Une balade tranquille à travers une clairière ensoleillée, où vous pourrez observer une grande variété de fleurs sauvages et d'insectes.",
                            EndingCoordinatesId = 34,
                            ImageUrl = "https://www.travelandleisure.com/thmb/9TgvQ-g-uFDD4IwbBzlZ8eeEZs8=/1500x0/filters:no_upscale():max_bytes(150000):strip_icc()/george-s-mickelson-trail-south-dakota_RAILTRAIL0123-f3e27d5d1e2f44efb8bf368185d74130.jpg",
                            Location = "Réserve Naturelle de la Clairière",
                            Name = "Chemin de la Clairière",
                            OwnerId = 1,
                            StartingCoordinatesId = 33,
                            Type = 1,
                            isPublic = false
                        },
                        new
                        {
                            Id = 19,
                            Description = "Une randonnée jusqu'à un rocher solitaire offrant une vue panoramique sur la vallée et les montagnes environnantes.",
                            EndingCoordinatesId = 36,
                            ImageUrl = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQAO_hEyiI2Tkfl5TI78QWQpncjBZ_7VWxtU4rceThJXeSRAKCutUx62Hfw5sdbX_QBEa4&usqp=CAU",
                            Location = "Réserve Naturelle du Rocher Solitaire",
                            Name = "Randonnée du Rocher Solitaire",
                            OwnerId = 1,
                            StartingCoordinatesId = 35,
                            Type = 1,
                            isPublic = false
                        },
                        new
                        {
                            Id = 20,
                            Description = "Une agréable promenade à travers un verger de pommiers en fleurs, où vous pourrez profiter du parfum délicat des fleurs et observer les abeilles qui butinent.",
                            EndingCoordinatesId = 38,
                            ImageUrl = "https://i.pinimg.com/originals/7f/e4/e2/7fe4e24eb9024d61139ac44a607e478a.jpg",
                            Location = "Verger des Pommiers",
                            Name = "Promenade des Pommiers",
                            OwnerId = 1,
                            StartingCoordinatesId = 37,
                            Type = 0,
                            isPublic = false
                        },
                        new
                        {
                            Id = 21,
                            Description = "Une randonnée menant à de magnifiques chutes d'eau cristalline, où vous pourrez vous rafraîchir et vous ressourcer en pleine nature.",
                            EndingCoordinatesId = 40,
                            ImageUrl = "https://blog.ab.bluecross.ca/wp-content/uploads/2020/08/fav-hikes-part-three.jpg",
                            Location = "Réserve Naturelle des Chutes de Cristal",
                            Name = "Sentier des Chutes de Cristal",
                            OwnerId = 1,
                            StartingCoordinatesId = 39,
                            Type = 0,
                            isPublic = false
                        },
                        new
                        {
                            Id = 22,
                            Description = "Une promenade relaxante le long des rives d'un lac serein, où vous pourrez observer les reflets du ciel et des montagnes sur l'eau calme.",
                            EndingCoordinatesId = 42,
                            ImageUrl = "https://www.nps.gov/hosp/planyourvisit/images/_DSC7261.jpg?maxwidth=650&autorotate=false",
                            Location = "Parc Naturel du Lac Serein",
                            Name = "Parcours du Lac Serein",
                            OwnerId = 1,
                            StartingCoordinatesId = 41,
                            Type = 1,
                            isPublic = false
                        },
                        new
                        {
                            Id = 23,
                            Description = "Une randonnée à travers les collines verdoyantes, où vous pourrez admirer les vues panoramiques sur la campagne environnante.",
                            EndingCoordinatesId = 44,
                            ImageUrl = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTUGLsH09jYtknRspMu0BDdOsADZrSLhzBUtA&usqp=CAU",
                            Location = "Réserve Naturelle des Collines Verdoyantes",
                            Name = "Randonnée des Collines Verdoyantes",
                            OwnerId = 1,
                            StartingCoordinatesId = 43,
                            Type = 0,
                            isPublic = false
                        },
                        new
                        {
                            Id = 24,
                            Description = "Une promenade menant à une cascade scintillante, où les rayons du soleil dansent sur l'eau en créant des arcs-en-ciel éphémères.",
                            EndingCoordinatesId = 46,
                            ImageUrl = "https://www.surrey.ca/sites/default/files/styles/metatag_facebook/public/2020-08/InvergarryNatureTrail.JPG?h=d262251e&itok=oXPbDLYW",
                            Location = "Réserve Naturelle de la Cascade Scintillante",
                            Name = "Sentier de la Cascade Scintillante",
                            OwnerId = 1,
                            StartingCoordinatesId = 45,
                            Type = 1,
                            isPublic = false
                        },
                        new
                        {
                            Id = 25,
                            Description = "Une boucle le long d'une rivière tranquille, où vous pourrez observer la faune et la flore locales tout en écoutant le doux murmure de l'eau.",
                            EndingCoordinatesId = 48,
                            ImageUrl = "https://i.natgeofe.com/n/71741e7e-db92-41fc-9c54-f781c3df87df/2C57A8C_16x9.jpg",
                            Location = "Réserve Naturelle de la Rivière Tranquille",
                            Name = "Boucle de la Rivière Tranquille",
                            OwnerId = 1,
                            StartingCoordinatesId = 47,
                            Type = 1,
                            isPublic = false
                        },
                        new
                        {
                            Id = 26,
                            Description = "Une randonnée exigeante menant au sommet d'un pic enneigé, offrant des vues panoramiques sur les montagnes enneigées à perte de vue.",
                            EndingCoordinatesId = 50,
                            ImageUrl = "https://www.lethbridge.ca/media/4bsdermr/pavan-trail.jpg",
                            Location = "Parc National des Pics Enneigés",
                            Name = "Randonnée du Pic Enneigé",
                            OwnerId = 1,
                            StartingCoordinatesId = 49,
                            Type = 0,
                            isPublic = false
                        },
                        new
                        {
                            Id = 27,
                            Description = "Une agréable balade le long d'une rivière sinueuse, où vous pourrez observer une grande variété d'oiseaux et de poissons.",
                            EndingCoordinatesId = 52,
                            ImageUrl = "https://www.travelandleisure.com/thmb/9TgvQ-g-uFDD4IwbBzlZ8eeEZs8=/1500x0/filters:no_upscale():max_bytes(150000):strip_icc()/george-s-mickelson-trail-south-dakota_RAILTRAIL0123-f3e27d5d1e2f44efb8bf368185d74130.jpg",
                            Location = "Parc Naturel de la Rivière Serpentine",
                            Name = "Parcours de la Rivière Serpentine",
                            OwnerId = 1,
                            StartingCoordinatesId = 51,
                            Type = 0,
                            isPublic = false
                        },
                        new
                        {
                            Id = 28,
                            Description = "Une randonnée matinale menant à un point de vue idéal pour observer le lever du soleil sur les montagnes environnantes.",
                            EndingCoordinatesId = 54,
                            ImageUrl = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTUGLsH09jYtknRspMu0BDdOsADZrSLhzBUtA&usqp=CAU",
                            Location = "Parc National du Lever du Soleil",
                            Name = "Randonnée du Lever du Soleil",
                            OwnerId = 1,
                            StartingCoordinatesId = 53,
                            Type = 0,
                            isPublic = false
                        },
                        new
                        {
                            Id = 29,
                            Description = "Une balade tranquille à travers une clairière ensoleillée, où vous pourrez observer une grande variété de fleurs sauvages et d'insectes.",
                            EndingCoordinatesId = 56,
                            ImageUrl = "https://www.travelandleisure.com/thmb/9TgvQ-g-uFDD4IwbBzlZ8eeEZs8=/1500x0/filters:no_upscale():max_bytes(150000):strip_icc()/george-s-mickelson-trail-south-dakota_RAILTRAIL0123-f3e27d5d1e2f44efb8bf368185d74130.jpg",
                            Location = "Réserve Naturelle de la Clairière",
                            Name = "Chemin de la Clairière",
                            OwnerId = 1,
                            StartingCoordinatesId = 55,
                            Type = 1,
                            isPublic = false
                        },
                        new
                        {
                            Id = 30,
                            Description = "Une randonnée à travers un paysage de rochers sculptés par le temps, où vous pourrez découvrir des formations rocheuses fascinantes.",
                            EndingCoordinatesId = 58,
                            ImageUrl = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQAO_hEyiI2Tkfl5TI78QWQpncjBZ_7VWxtU4rceThJXeSRAKCutUx62Hfw5sdbX_QBEa4&usqp=CAU",
                            Location = "Réserve Naturelle des Rochers Ciselés",
                            Name = "Randonnée des Rochers Ciselés",
                            OwnerId = 1,
                            StartingCoordinatesId = 57,
                            Type = 1,
                            isPublic = false
                        });
                });

            modelBuilder.Entity("Arsoude_Backend.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AreaCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("HouseNo")
                        .HasColumnType("INTEGER");

                    b.Property<string>("IdentityUserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("MonthOfBirth")
                        .HasColumnType("INTEGER");

                    b.Property<string>("State")
                        .HasColumnType("TEXT");

                    b.Property<string>("Street")
                        .HasColumnType("TEXT");

                    b.Property<int?>("YearOfBirth")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("IdentityUserId");

                    b.ToTable("TrailUsers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AreaCode = "111 111",
                            FirstName = "Test",
                            IdentityUserId = "11111111-1111-1111-1111-111111111112",
                            LastName = "Test"
                        });
                });

            modelBuilder.Entity("Arsoude_Backend.Models.UserFavoriteTrail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("TrailId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserFavoriteTrails");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "11111111-1111-1111-1111-111111111113",
                            ConcurrencyStamp = "0ddc2db3-7e01-45df-9b99-50fbcbd73139",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "11111111-1111-1111-1111-111111111111",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "64ea326b-79c5-4975-9490-f3cf200cf6ec",
                            Email = "admin@admin.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@ADMIN.COM",
                            NormalizedUserName = "ADMIN@ADMIN.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEDdKtVkgt6vNQGFkroB6L5kk0l5k29ECZy9TVKn43zTIDzlgdiCGgyyjMcUm0Pw3tA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a2322085-223a-4a3c-930e-93eeea3fb468",
                            TwoFactorEnabled = false,
                            UserName = "admin@admin.com"
                        },
                        new
                        {
                            Id = "11111111-1111-1111-1111-111111111112",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "15629988-76b9-4045-96b7-f11daa1f85e4",
                            Email = "user@user.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@USER.COM",
                            NormalizedUserName = "USER@USER.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEMvLsGmNN0ocD3gTrLVqiAPuaxA+rMG7K+rp9Qncntibi2aR/vX1AqBpgjj2HXMJ5Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "686bc392-1dbe-45aa-8322-a394b5765815",
                            TwoFactorEnabled = false,
                            UserName = "user@user.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "11111111-1111-1111-1111-111111111111",
                            RoleId = "11111111-1111-1111-1111-111111111113"
                        },
                        new
                        {
                            UserId = "11111111-1111-1111-1111-111111111112",
                            RoleId = "11111111-1111-1111-1111-111111111113"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Arsoude_Backend.Models.Coordinates", b =>
                {
                    b.HasOne("Arsoude_Backend.Models.Trail", null)
                        .WithMany("Coordinates")
                        .HasForeignKey("TrailId");
                });

            modelBuilder.Entity("Arsoude_Backend.Models.Trail", b =>
                {
                    b.HasOne("Arsoude_Backend.Models.Coordinates", "EndingCoordinates")
                        .WithMany()
                        .HasForeignKey("EndingCoordinatesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Arsoude_Backend.Models.Coordinates", "StartingCoordinates")
                        .WithMany()
                        .HasForeignKey("StartingCoordinatesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EndingCoordinates");

                    b.Navigation("StartingCoordinates");
                });

            modelBuilder.Entity("Arsoude_Backend.Models.User", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "IdentityUser")
                        .WithMany()
                        .HasForeignKey("IdentityUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdentityUser");
                });

            modelBuilder.Entity("Arsoude_Backend.Models.UserFavoriteTrail", b =>
                {
                    b.HasOne("Arsoude_Backend.Models.User", null)
                        .WithMany("FavouriteTrails")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Arsoude_Backend.Models.Trail", b =>
                {
                    b.Navigation("Coordinates");
                });

            modelBuilder.Entity("Arsoude_Backend.Models.User", b =>
                {
                    b.Navigation("FavouriteTrails");
                });
#pragma warning restore 612, 618
        }
    }
}
